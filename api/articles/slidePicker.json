{"title":"slidePicker滑动选择组件封装","uid":"90855528bf80b04a5ecf54c5c2be2ee5","slug":"slidePicker","date":"2024-01-27T10:21:06.000Z","updated":"2024-10-09T13:19:33.779Z","comments":true,"path":"api/articles/slidePicker.json","keywords":null,"cover":"/images/cover1.jpg","content":"<p>记录一下最近封装的滑动选择器组件，支持滑动选择，支持单列，多列、无限滚动。</p>\n<p>外层组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;picker-box&quot; :style=&quot;&#123; height: boxHeight + &#x27;px&#x27; &#125;&quot;&gt;</span><br><span class=\"line\">    &lt;template v-for=&quot;(item, index) in selectArr&quot;&gt;</span><br><span class=\"line\">      &lt;PickerItem</span><br><span class=\"line\">        :key=&quot;index&quot;</span><br><span class=\"line\">        :listData=&quot;item&quot;</span><br><span class=\"line\">        :type=&quot;type&quot;</span><br><span class=\"line\">        :itemHeight=&quot;itemHeight&quot;</span><br><span class=\"line\">        :currentData=&quot;currentData[index]&quot;</span><br><span class=\"line\">        :time=&quot;time&quot;</span><br><span class=\"line\">        :boxHeight=&quot;boxHeight&quot;</span><br><span class=\"line\">        @selectChange=&quot;selectChange(index, $event)&quot;</span><br><span class=\"line\">      &gt;&lt;/PickerItem&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div</span><br><span class=\"line\">      class=&quot;picker-box__mask-top picker-box__mask&quot;</span><br><span class=\"line\">      :style=&quot;&#123; height: maskHeight &#125;&quot;</span><br><span class=\"line\">    &gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div</span><br><span class=\"line\">      class=&quot;picker-box__mask-bottom picker-box__mask&quot;</span><br><span class=\"line\">      :style=&quot;&#123; height: maskHeight &#125;&quot;</span><br><span class=\"line\">    &gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div</span><br><span class=\"line\">      class=&quot;picker-box__border&quot;</span><br><span class=\"line\">      :class=&quot;&#123; &#x27;picker-box__border-bg&#x27;: borderBg &#125;&quot;</span><br><span class=\"line\">      :style=&quot;&#123; height: itemHeight + &#x27;px&#x27; &#125;&quot;</span><br><span class=\"line\">    &gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import PickerItem from &quot;./components/PickerItem/index.vue&quot;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;SlidePicker&quot;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    PickerItem,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    boxHeight: &#123;</span><br><span class=\"line\">      type: Number,</span><br><span class=\"line\">      default: 216,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    selectArr: &#123;</span><br><span class=\"line\">      type: Array,</span><br><span class=\"line\">      default: () =&gt; [],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    type: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &quot;normal&quot;, // normal为非无限滚动，infinite为无限滚动</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    itemHeight: &#123;</span><br><span class=\"line\">      type: Number,</span><br><span class=\"line\">      default: 46,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    currentData: &#123;</span><br><span class=\"line\">      type: Array,</span><br><span class=\"line\">      default: () =&gt; [],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    time: &#123;</span><br><span class=\"line\">      type: Number,</span><br><span class=\"line\">      default: 300,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    borderBg: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: false,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      changeData: [],</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;&#125;,</span><br><span class=\"line\">  watch: &#123;&#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    maskHeight() &#123;</span><br><span class=\"line\">      return `$&#123;this.boxHeight / 2 - this.itemHeight / 2&#125;px`;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    indicatorStyle() &#123;</span><br><span class=\"line\">      return `height: $&#123;this.itemHeight&#125;px;`;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    selectChange(index, event) &#123;</span><br><span class=\"line\">      if (this.changeData.length &lt; this.selectArr.length) &#123;</span><br><span class=\"line\">        this.changeData.push(event);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        this.changeData.forEach((item) =&gt; &#123;</span><br><span class=\"line\">          if (item.value !== event.value) &#123;</span><br><span class=\"line\">            this.$set(this.changeData, index, event);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      this.$emit(&quot;selectChange&quot;, this.changeData);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style lang=&quot;less&quot;&gt;</span><br><span class=\"line\">@import &quot;../../common/style/theme.less&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">.picker-box &#123;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height: 216px;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\"></span><br><span class=\"line\">  &amp;__mask &#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    z-index: 3;</span><br><span class=\"line\">    pointer-events: none;</span><br><span class=\"line\">    transform: translateZ(1px);</span><br><span class=\"line\">    &amp;-top &#123;</span><br><span class=\"line\">      top: 0;</span><br><span class=\"line\">      background-image: linear-gradient(</span><br><span class=\"line\">        to top,</span><br><span class=\"line\">        rgba(255, 255, 255, 0.5) 0%,</span><br><span class=\"line\">        rgba(255, 255, 255, 0.9) 100%</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &amp;-bottom &#123;</span><br><span class=\"line\">      bottom: 0;</span><br><span class=\"line\">      background-image: linear-gradient(</span><br><span class=\"line\">        to bottom,</span><br><span class=\"line\">        rgba(255, 255, 255, 0.5) 0%,</span><br><span class=\"line\">        rgba(255, 255, 255, 0.9) 100%</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .picker-mask &#123;</span><br><span class=\"line\">    background: none !important;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;__border &#123;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    pointer-events: none;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    top: 50%;</span><br><span class=\"line\">    transform: translateY(-50%);</span><br><span class=\"line\">    z-index: 4;</span><br><span class=\"line\">    &amp;::after,</span><br><span class=\"line\">    &amp;::before &#123;</span><br><span class=\"line\">      content: &quot;&quot;;</span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">      height: 1px;</span><br><span class=\"line\">      background-color: rgba(0, 0, 0, 0.1);</span><br><span class=\"line\">      transform: scaleY(0.5);</span><br><span class=\"line\">      transform-origin: 0 0;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      left: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;::after &#123;</span><br><span class=\"line\">      top: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &amp;::before &#123;</span><br><span class=\"line\">      bottom: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;.picker-box__border-bg &#123;</span><br><span class=\"line\">      width: calc(100% - 16px);</span><br><span class=\"line\">      margin: 0 8px;</span><br><span class=\"line\">      border-radius: 8px;</span><br><span class=\"line\">      background-color: rgba(0, 0, 0, 0.05);</span><br><span class=\"line\">      background-image: none;</span><br><span class=\"line\"></span><br><span class=\"line\">      &amp;::after,</span><br><span class=\"line\">      &amp;::before &#123;</span><br><span class=\"line\">        display: none;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;picker-item&quot; ref=&quot;pickeritem&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;picker-list&quot;&gt;</span><br><span class=\"line\">      &lt;div</span><br><span class=\"line\">        class=&quot;picker-ul&quot;</span><br><span class=\"line\">        ref=&quot;list&quot;</span><br><span class=\"line\">        :style=&quot;&#123; height: itemHeight + &#x27;px&#x27;, top: ulTop &#125;&quot;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        &lt;div</span><br><span class=\"line\">          class=&quot;picker-list-item&quot;</span><br><span class=\"line\">          v-for=&quot;(el, index) in renderData&quot;</span><br><span class=\"line\">          :class=&quot;&#123; hidden: setHidden(el.index) &#125;&quot;</span><br><span class=\"line\">          :style=&quot;&#123; height: itemHeight + &#x27;px&#x27; &#125;&quot;</span><br><span class=\"line\">          :key=&quot;index&quot;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          &#123;&#123; el.text &#125;&#125;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div</span><br><span class=\"line\">      class=&quot;picker-wheel&quot;</span><br><span class=\"line\">      ref=&quot;wheel&quot;</span><br><span class=\"line\">      :style=&quot;&#123; height: itemHeight + &#x27;px&#x27;, top: ulTop &#125;&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">      &lt;div</span><br><span class=\"line\">        class=&quot;picker-wheel-item&quot;</span><br><span class=\"line\">        :class=&quot;&#123; hidden: setHidden(el.index) &#125;&quot;</span><br><span class=\"line\">        :style=&quot;&#123;</span><br><span class=\"line\">          height: itemHeight + &#x27;px&#x27;,</span><br><span class=\"line\">          transform: setWheelItemDeg(el.index),</span><br><span class=\"line\">        &#125;&quot;</span><br><span class=\"line\">        :index=&quot;el.index&quot;</span><br><span class=\"line\">        v-for=&quot;(el, index) in renderData&quot;</span><br><span class=\"line\">        :key=&quot;index&quot;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        &#123;&#123; el.text &#125;&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">  name: &#x27;PickerItem&#x27;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      spin: &#123; start: -9, end: 9, branch: 9 &#125;,</span><br><span class=\"line\">      finger: &#123; startY: 0, lastY: 0, startTime: 0, lastTime: 0, transformY: 0 &#125;,</span><br><span class=\"line\">      flag: true,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    boxHeight: &#123;</span><br><span class=\"line\">      type: Number,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    listData: &#123;</span><br><span class=\"line\">      type: Array,</span><br><span class=\"line\">      default: () =&gt; [],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    type: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    itemHeight: &#123;</span><br><span class=\"line\">      type: Number,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    currentData: &#123;</span><br><span class=\"line\">      type: Object,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    time: &#123;</span><br><span class=\"line\">      type: Number,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    renderData() &#123;</span><br><span class=\"line\">      const temp = [];</span><br><span class=\"line\">      for (let k = this.spin.start; k &lt;= this.spin.end; k++) &#123;</span><br><span class=\"line\">        const data = &#123;</span><br><span class=\"line\">          text: this.getSpinData(k).text,</span><br><span class=\"line\">          index: k,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        temp.push(data);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return temp;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ulTop() &#123;</span><br><span class=\"line\">      return `$&#123;this.boxHeight / 2 - this.itemHeight / 2&#125;px`;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    this.$refs.pickeritem.addEventListener(&#x27;touchstart&#x27;, this.itemTouchStart);</span><br><span class=\"line\">    this.$refs.pickeritem.addEventListener(&#x27;touchmove&#x27;, this.itemTouchMove);</span><br><span class=\"line\">    this.$refs.pickeritem.addEventListener(&#x27;touchend&#x27;, this.itemTouchEnd);</span><br><span class=\"line\">    this.init();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    currentData: &#123;</span><br><span class=\"line\">      handler(newVal, oldVal) &#123;</span><br><span class=\"line\">        if (newVal !== oldVal &amp;&amp; this.flag) &#123;</span><br><span class=\"line\">          this.init();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      immediate: true,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    init() &#123;</span><br><span class=\"line\">      this.$nextTick(() =&gt; &#123;</span><br><span class=\"line\">        let index;</span><br><span class=\"line\">        let move;</span><br><span class=\"line\">        let value;</span><br><span class=\"line\">        value = this.currentData?.value || &#x27;&#x27;;</span><br><span class=\"line\">        this.finger = &#123; startY: 0, lastY: 0, startTime: 0, lastTime: 0, transformY: 0 &#125;;</span><br><span class=\"line\">        index = this.listData.findIndex(item =&gt; item.value == value);</span><br><span class=\"line\">        if (index === -1) &#123;</span><br><span class=\"line\">          this.setListTransform();</span><br><span class=\"line\">          this.getPickValue(0);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          move = index * this.itemHeight;</span><br><span class=\"line\">          this.setStyle(-move);</span><br><span class=\"line\">          this.setListTransform(-move, -move);</span><br><span class=\"line\">          this.getPickValue(-move);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setHidden(index) &#123;</span><br><span class=\"line\">      if (this.type === &#x27;normal&#x27;) &#123;</span><br><span class=\"line\">        return index &lt; 0 || index &gt; this.listData.length - 1;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return false;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setWheelItemDeg(index) &#123;</span><br><span class=\"line\">      return `rotate3d(1, 0, 0, $&#123;(-index * 20) % 360&#125;deg) translate3d(0px, 0px, $&#123;`$&#123;</span><br><span class=\"line\">        2.8 * this.itemHeight</span><br><span class=\"line\">      &#125;px`&#125;)`;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setWheelDeg(updateDeg, type, time = this.time) &#123;</span><br><span class=\"line\">      if (type === &#x27;infinite&#x27;) &#123;</span><br><span class=\"line\">        this.$refs.wheel.style.transition = `transform $&#123;time&#125;ms ease-out`;</span><br><span class=\"line\">        this.$refs.wheel.style.transform = `rotate3d(1, 0, 0, $&#123;updateDeg&#125;deg)`;</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        this.$refs.wheel.style.transition = &#x27;&#x27;;</span><br><span class=\"line\">        this.$refs.wheel.style.transform = `rotate3d(1, 0, 0, $&#123;updateDeg&#125;deg)`;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setListTransform(translateY = 0, marginTop = 0, type, time = this.time) &#123;</span><br><span class=\"line\">      if (type === &#x27;infinite&#x27;) &#123;</span><br><span class=\"line\">        this.$refs.list.style.transition = `transform $&#123;time&#125;ms ease-out`;</span><br><span class=\"line\">        this.$refs.list.style.transform = `translateY($&#123;translateY - this.spin.branch * this.itemHeight&#125;px)`;</span><br><span class=\"line\">        this.$refs.list.style.marginTop = `$&#123;-marginTop&#125;px`;</span><br><span class=\"line\">        this.$refs.list.setAttribute(&#x27;scroll&#x27;, translateY);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        this.$refs.list.style.transition = &#x27;&#x27;;</span><br><span class=\"line\">        this.$refs.list.style.transform = `translateY($&#123;translateY - this.spin.branch * this.itemHeight&#125;px)`;</span><br><span class=\"line\">        this.$refs.list.style.marginTop = `$&#123;-marginTop&#125;px`;</span><br><span class=\"line\">        this.$refs.list.setAttribute(&#x27;scroll&#x27;, translateY);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    itemTouchStart(event) &#123;</span><br><span class=\"line\">      this.flag = false;</span><br><span class=\"line\">      let finger = event.changedTouches[0];</span><br><span class=\"line\">      this.finger.startY = finger.pageY;</span><br><span class=\"line\">      this.finger.startTime = event.timeStamp || Date.now();</span><br><span class=\"line\">      this.finger.transformY = this.$refs.list.getAttribute(&#x27;scroll&#x27;);</span><br><span class=\"line\">      event.preventDefault();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    itemTouchMove(event) &#123;</span><br><span class=\"line\">      let finger = event.changedTouches[0];</span><br><span class=\"line\">      this.finger.lastY = finger.pageY;</span><br><span class=\"line\">      this.finger.lastTime = event.timeStamp || Date.now();</span><br><span class=\"line\">      const move = this.finger.lastY - this.finger.startY;</span><br><span class=\"line\">      this.setStyle(move);</span><br><span class=\"line\">      event.preventDefault();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    itemTouchEnd(event) &#123;</span><br><span class=\"line\">      let finger = event.changedTouches[0];</span><br><span class=\"line\">      this.finger.lastY = finger.pageY;</span><br><span class=\"line\">      this.finger.lastTime = event.timeStamp || Date.now();</span><br><span class=\"line\">      let move = this.finger.lastY - this.finger.startY;</span><br><span class=\"line\"></span><br><span class=\"line\">      let time = this.finger.lastTime - this.finger.startTime;</span><br><span class=\"line\">      const v = move / time;</span><br><span class=\"line\"></span><br><span class=\"line\">      const a = 2.6;</span><br><span class=\"line\">      if (time &lt;= 300) &#123;</span><br><span class=\"line\">        move = v * a * time;</span><br><span class=\"line\">        time = this.time + time * a;</span><br><span class=\"line\">        this.setStyle(move, &#x27;infinite&#x27;, time);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        this.setStyle(move, &#x27;infinite&#x27;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // 由于长按时watch监听的currentData会多次触发init事件，这里等滑动结束再触发。</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">          this.flag = true;</span><br><span class=\"line\">        &#125;, this.time);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setStyle(move, type, time) &#123;</span><br><span class=\"line\">      const singleHeight = this.itemHeight;</span><br><span class=\"line\">      const deg = 20;</span><br><span class=\"line\">      const singleDeg = deg / singleHeight;</span><br><span class=\"line\">      const currentListMove = this.finger.transformY;</span><br><span class=\"line\">      let updateMove = move + Number(currentListMove);</span><br><span class=\"line\">      let updateDeg;</span><br><span class=\"line\">      let spinAim;</span><br><span class=\"line\">      let margin;</span><br><span class=\"line\">      let endMove;</span><br><span class=\"line\">      let endDeg;</span><br><span class=\"line\">      if (type === &#x27;infinite&#x27; &amp;&amp; this.type === &#x27;normal&#x27;) &#123;</span><br><span class=\"line\">        if (updateMove &gt; 0) &#123;</span><br><span class=\"line\">          updateMove = 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (updateMove &lt; -(this.listData.length - 1) * singleHeight) &#123;</span><br><span class=\"line\">          updateMove = -(this.listData.length - 1) * singleHeight;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      updateDeg = -updateMove * singleDeg;</span><br><span class=\"line\">      spinAim = Math.round(updateDeg / 20);</span><br><span class=\"line\">      margin = Math.round(updateMove / singleHeight) * singleHeight;</span><br><span class=\"line\">      endMove = margin;</span><br><span class=\"line\">      endDeg = Math.round(updateDeg / deg) * deg;</span><br><span class=\"line\">      if (type === &#x27;infinite&#x27;) &#123;</span><br><span class=\"line\">        this.setListTransform(endMove, margin, type, time);</span><br><span class=\"line\">        this.setWheelDeg(endDeg, type, time);</span><br><span class=\"line\">        setTimeout(() =&gt; this.getPickValue(endMove), this.time);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        this.setListTransform(updateMove, margin);</span><br><span class=\"line\">        this.setWheelDeg(updateDeg);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      this.updateSpin(spinAim);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updateSpin(spinAim) &#123;</span><br><span class=\"line\">      this.spin.start = this.spin.branch * -1 + spinAim;</span><br><span class=\"line\">      this.spin.end = this.spin.start + this.spin.branch * 2;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getSpinData(index) &#123;</span><br><span class=\"line\">      index = index % this.listData.length;</span><br><span class=\"line\">      return this.listData[index &gt;= 0 ? index : index + this.listData.length];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getPickValue(move) &#123;</span><br><span class=\"line\">      const index = Math.round(-move / this.itemHeight);</span><br><span class=\"line\">      const pickValue = this.getSpinData(index);</span><br><span class=\"line\">      this.$emit(&#x27;selectChange&#x27;, pickValue);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeDestroy() &#123;</span><br><span class=\"line\">    this.$refs.pickeritem.removeEventListener(&#x27;touchstart&#x27;, this.itemTouchStart);</span><br><span class=\"line\">    this.$refs.pickeritem.removeEventListener(&#x27;touchmove&#x27;, this.itemTouchMove);</span><br><span class=\"line\">    this.$refs.pickeritem.removeEventListener(&#x27;touchend&#x27;, this.itemTouchEnd);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style lang=&quot;less&quot;&gt;</span><br><span class=\"line\">.picker &#123;</span><br><span class=\"line\">  &amp;-item &#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    &amp; ul,</span><br><span class=\"line\">    li &#123;</span><br><span class=\"line\">      padding: 0;</span><br><span class=\"line\">      list-style: none;</span><br><span class=\"line\">      margin: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;-ul &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;-list,</span><br><span class=\"line\">  &amp;-wheel &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    top: 82px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;-wheel &#123;</span><br><span class=\"line\">    z-index: 1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;-list &#123;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;-list-item,</span><br><span class=\"line\">  &amp;-wheel-item &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\">    white-space: nowrap;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    text-overflow: ellipsis;</span><br><span class=\"line\">    font-size: 17px;</span><br><span class=\"line\">    color: #000;</span><br><span class=\"line\">    &amp;.hidden &#123;</span><br><span class=\"line\">      visibility: hidden;</span><br><span class=\"line\">      opacity: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;-list-item &#123;</span><br><span class=\"line\">    color: transparent !important;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;-wheel &#123;</span><br><span class=\"line\">    transform-style: preserve-3d;</span><br><span class=\"line\">    height: 46px;</span><br><span class=\"line\">    &amp;-item &#123;</span><br><span class=\"line\">      backface-visibility: hidden;</span><br><span class=\"line\">      -webkit-backface-visibility: hidden;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 0;</span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>写的比较菜，凑合着看👀吧</p>\n","text":"记录一下最近封装的滑动选择器组件，支持滑动选择，支持单列，多列、无限滚动。 外层组件 <template> <div class=\"picker-box\" :s...","permalink":"/post/slidePicker","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"vue","slug":"vue","count":3,"path":"api/categories/vue.json"}],"tags":[{"name":"components","slug":"components","count":4,"path":"api/tags/components.json"}],"toc":"","author":{"name":"M","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"这是我的博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Web Animation API","uid":"da362a96629596348f7f7dfa7c5960d5","slug":"web-animation","date":"2024-02-25T08:37:38.000Z","updated":"2024-10-09T13:21:36.716Z","comments":true,"path":"api/articles/web-animation.json","keywords":null,"cover":"/images/cover1.jpg","text":"简单写一个例子记录一下 Web Animation API, animate (array,Object); array: 主要传一个动画数组对象，来定义动画，...","permalink":"/post/web-animation","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"javascript","slug":"javascript","count":8,"path":"api/categories/javascript.json"}],"tags":[{"name":"Web API","slug":"Web-API","count":5,"path":"api/tags/Web-API.json"}],"author":{"name":"M","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"这是我的博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"封装canvas画分享图能力","uid":"5ec98a85a99b57e340a9a2a9ff61c2c1","slug":"canvas-screenshot","date":"2023-08-20T09:18:20.000Z","updated":"2024-10-09T13:25:38.667Z","comments":true,"path":"api/articles/canvas-screenshot.json","keywords":null,"cover":"/images/cover1.jpg","text":"整理了一下工作中封装的画分享海报的能力 class ShareCanvas { constructor(config) { this.width = confi...","permalink":"/post/canvas-screenshot","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"canvas","slug":"canvas","count":1,"path":"api/categories/canvas.json"}],"tags":[{"name":"canvas","slug":"canvas","count":1,"path":"api/tags/canvas.json"}],"author":{"name":"M","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"这是我的博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}