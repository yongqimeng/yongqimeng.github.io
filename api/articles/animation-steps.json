{"title":"逐帧动画实现无限轮播","uid":"92e648db1789cade1fa84cef6b1bbfe8","slug":"animation-steps","date":"2022-11-26T08:01:04.000Z","updated":"2024-10-09T13:12:13.695Z","comments":true,"path":"api/articles/animation-steps.json","keywords":null,"cover":"/images/cover1.jpg","content":"<p>最近有一个无限滚动轮播的需求，最开始用js+延时器写了一版，但因为是用在首页性能消耗很大，所以想试试能不能用css搞定，嘿，还真发现了一种方法，虽然最后没有使用这种方法，但也学学看吧。</p>\n<p>先看个完成效果</p>\n<p><img src=\"/images/animation-steps.gif\" alt=\"steps\"></p>\n<ul>\n<li><p>我们来简单分析分析，从表面上看，确实好像只有元素的 <code>transform: translate()</code> 在位移，但是注意，这里有两个难点：</p>\n<ul>\n<li>这是个无限轮播的效果，我们的动画需要支持任意多个元素的无限轮播切换</li>\n<li>因为是轮播，所以，运行到最后一个的时候，需要动画切到第一个元素</li>\n</ul>\n</li>\n</ul>\n<p>到这里，你可以暂停思考一下，如果有 20 个元素，需要进行类似的无限轮播播报，使用 CSS 实现，你会怎么去做呢？</p>\n<h3 id=\"逐帧动画控制整体切换\"><a href=\"#逐帧动画控制整体切换\" class=\"headerlink\" title=\"逐帧动画控制整体切换\"></a>逐帧动画控制整体切换</h3><p>在这里，要实现轮播效果，并且是任意个数，我们可以借助 <code>animation-timing-function: steps()</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  // 轮播的个数</span><br><span class=\"line\">  <span class=\"attr\">--s</span>: <span class=\"number\">6</span>;</span><br><span class=\"line\">  // 单个 <span class=\"selector-tag\">li</span> 容器的高度</span><br><span class=\"line\">  <span class=\"attr\">--h</span>: <span class=\"number\">36</span>;</span><br><span class=\"line\">  // 单次动画的时长</span><br><span class=\"line\">  <span class=\"attr\">--speed</span>: <span class=\"number\">1.5s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.g-container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"built_in\">calc</span>(<span class=\"built_in\">var</span>(--h) * <span class=\"number\">1px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: move <span class=\"built_in\">calc</span>(<span class=\"built_in\">var</span>(--speed) * <span class=\"built_in\">var</span>(--s)) <span class=\"built_in\">steps</span>(<span class=\"built_in\">var</span>(--s)) infinite;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> move &#123;</span><br><span class=\"line\">  <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(<span class=\"number\">0</span>, <span class=\"built_in\">calc</span>(<span class=\"built_in\">var</span>(--s) * <span class=\"built_in\">var</span>(--h) * -<span class=\"number\">1px</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>别看到上述有几个 CSS 变量就慌了，其实很好理解：</p>\n<p><code>calc(var(--speed) * var(--s))</code>：单次动画的耗时 * 轮播的个数，也就是总动画时长</p>\n<p><code>steps(var(--s))</code> 就是逐帧动画的帧数，这里也就是 <code>steps(6)</code>，很好理解</p>\n<p><code>calc(var(--s) * var(--h) * -1px))</code> 单个 li 容器的高度 * 轮播的个数，其实就是 ul 的总体高度，用于设置逐帧动画的终点值</p>\n<p>效果如下：</p>\n<p><img src=\"/images/animation-steps1.gif\" alt=\"steps1\"></p>\n<p>这样，我们就得到了整体的结构，至少，整个效果是循环的。</p>\n<p>但是由于只是逐帧动画，所以只能看到切换，但是每一帧之间，没有过渡动画效果。所以，接下来，我们还得引入补间动画。</p>\n<h3 id=\"利用补间动画实现两组数据间的切换\"><a href=\"#利用补间动画实现两组数据间的切换\" class=\"headerlink\" title=\"利用补间动画实现两组数据间的切换\"></a>利用补间动画实现两组数据间的切换</h3><p>我们需要利用补间动画，实现动态的切换效果。</p>\n<p>这一步，其实也非常简单，我们要做的，就是将一组数据，利用 <code>transform</code>，从状态 A 位移到 状态 B。</p>\n<p>把一开始提到的 逐帧动画 和这里这个 补间动画 结合一下，ul 的整体移动，和 li 的 单个移动叠在在一起：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;g-container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;--s: 6&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1111111<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2222222<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3333333<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4444444<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>5555555<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>6666666<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  // 轮播的个数</span><br><span class=\"line\">  <span class=\"attr\">--s</span>: <span class=\"number\">6</span>;</span><br><span class=\"line\">  // 单个 <span class=\"selector-tag\">li</span> 容器的高度</span><br><span class=\"line\">  <span class=\"attr\">--h</span>: <span class=\"number\">36</span>;</span><br><span class=\"line\">  // 单次动画的时长</span><br><span class=\"line\">  <span class=\"attr\">--speed</span>: <span class=\"number\">1.5s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.g-container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"built_in\">calc</span>(<span class=\"built_in\">var</span>(--h) * <span class=\"number\">1px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: move <span class=\"built_in\">calc</span>(<span class=\"built_in\">var</span>(--speed) * <span class=\"built_in\">var</span>(--s)) <span class=\"built_in\">steps</span>(<span class=\"built_in\">var</span>(--s)) infinite;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: liMove <span class=\"built_in\">calc</span>(<span class=\"built_in\">var</span>(--speed)) infinite;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> move &#123;</span><br><span class=\"line\">  <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(<span class=\"number\">0</span>, <span class=\"built_in\">calc</span>(<span class=\"built_in\">var</span>(--s) * <span class=\"built_in\">var</span>(--h) * -<span class=\"number\">1px</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> liMove &#123;</span><br><span class=\"line\">  <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"number\">80%</span>,</span><br><span class=\"line\">  <span class=\"number\">100%</span>  &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(<span class=\"number\">0</span>, <span class=\"built_in\">calc</span>(<span class=\"built_in\">var</span>(--h) * -<span class=\"number\">1px</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果变为这样</p>\n<p><img src=\"/images/animation-steps2.gif\" alt=\"steps2\"></p>\n<p>基于 逐帧动画 和 补间动画 的结合，我们几乎实现了一个轮播效果</p>\n<p>当然，有一点瑕疵，可以看到，最后一组数据，是从第六组数据 transform 移动向了一组空数据</p>\n<p>实际开发过轮播的同学肯定知道，这里，其实也很好处理，我们只需要在末尾，补一组头部的第一个数据即可</p>\n<p>这样我们就实现了开头那样的无限轮播效果啦~</p>\n<p>横向的也是可以的，只需改变位移方向即可实现</p>\n<p>掌握了这个技巧之后，你可以将它运用在非常多只需要简化版的轮播效果之上。</p>\n<p><a href=\"https://codepen.io/yongqimeng/pen/xxoXXmP?editors=1100\">完整代码codepen</a></p>\n<ul>\n<li><p>再简单总结一下，有实用也有缺点：</p>\n<ul>\n<li>利用 逐帧动画，实现整体的轮播的循环效果</li>\n<li>利用 补间动画，实现具体的 *状态A 向 状态B 的动画效果</li>\n<li>逐帧动画 配合 补间动画 构成整体轮播的效果</li>\n<li>通过向 HTML 结构末尾补充一组头部数据，实现整体动画的衔接</li>\n<li>通过 HTML 元素的 style 标签，利用 CSS 变量，填入实际的参与循环的 DOM 个数，可以实现 JavaScript 与 CSS 的打通</li>\n<li>注意iOS系统14以下的暂时不能兼容，如果要是兼容的话最好还是不要使用此方法</li>\n<li>跳转页面再回来可能会有错乱</li>\n</ul>\n</li>\n</ul>\n","feature":true,"text":"最近有一个无限滚动轮播的需求，最开始用js+延时器写了一版，但因为是用在首页性能消耗很大，所以想试试能不能用css搞定，嘿，还真发现了一种方法，虽然最后没有使用...","permalink":"/post/animation-steps","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"css","slug":"css","count":2,"path":"api/categories/css.json"},{"name":"animation","slug":"css/animation","count":2,"path":"api/categories/css/animation.json"}],"tags":[{"name":"animation","slug":"animation","count":2,"path":"api/tags/animation.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%90%E5%B8%A7%E5%8A%A8%E7%94%BB%E6%8E%A7%E5%88%B6%E6%95%B4%E4%BD%93%E5%88%87%E6%8D%A2\"><span class=\"toc-text\">逐帧动画控制整体切换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8%E8%A1%A5%E9%97%B4%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0%E4%B8%A4%E7%BB%84%E6%95%B0%E6%8D%AE%E9%97%B4%E7%9A%84%E5%88%87%E6%8D%A2\"><span class=\"toc-text\">利用补间动画实现两组数据间的切换</span></a></li></ol>","author":{"name":"M","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"这是我的博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"白天与黑夜模式切换","uid":"9c18a0a19d9da2524bfd7e84c96937b7","slug":"darkmode & lightmode","date":"2023-02-11T06:20:21.000Z","updated":"2024-10-09T12:36:07.412Z","comments":true,"path":"api/articles/darkmode & lightmode.json","keywords":null,"cover":"/images/cover1.jpg","text":"通过给body添加类名和prefers-color-scheme方法改变darkmode和lightmode对应的less变量来实现白天与黑夜模式切换。 定义一...","permalink":"/post/darkmode & lightmode","photos":[],"count_time":{"symbolsCount":643,"symbolsTime":"1 mins."},"categories":[{"name":"html&css","slug":"html-css","count":7,"path":"api/categories/html-css.json"}],"tags":[{"name":"css","slug":"css","count":5,"path":"api/tags/css.json"}],"author":{"name":"M","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"这是我的博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"记一次根据滚动方向的执行的动画","uid":"188442f1e3ef788a161e45fb6af1fd78","slug":"scroll-animation","date":"2024-07-20T07:08:38.000Z","updated":"2024-10-09T13:03:36.750Z","comments":true,"path":"api/articles/scroll-animation.json","keywords":null,"cover":"/images/cover1.jpg","text":"记录整理最近写的需求，根据滚动条判断手势滑动方向，下滑正常样式，向上滚动展示组件，这里我用一个导航栏代替 主要代码 .wrapper__nav.wrapper_...","permalink":"/post/scroll-animation","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"vue","slug":"vue","count":2,"path":"api/categories/vue.json"}],"tags":[{"name":"animation","slug":"animation","count":2,"path":"api/tags/animation.json"}],"author":{"name":"M","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"这是我的博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}