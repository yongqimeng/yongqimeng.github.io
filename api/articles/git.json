{"title":"git 常用命令","uid":"62bc8025e0eb197d420ffa98bc79c161","slug":"git","date":"2024-08-17T07:36:39.589Z","updated":"2024-08-17T07:53:52.733Z","comments":true,"path":"api/articles/git.json","keywords":null,"cover":"/images/cover1.jpg","content":"<p>目前常用的git命令整理</p>\n<p>1，git init</p>\n<p>初始化一个新的Git仓库。</p>\n<p>这将在当前目录中创建一个名为”.git”的子目录，Git会将所有仓库的元数据存储在其中。</p>\n<p>2，git clone</p>\n<p>克隆一个已存在的仓库。</p>\n<p>这会创建一个本地仓库的副本，包括其所有的历史记录和分支。</p>\n<p>git clone &lt;仓库链接&gt;</p>\n<p>3，git add</p>\n<p>将修改内容添加到下一次提交中。</p>\n<p>这将把指定的文件添加到暂存区，这些文件将包含在下一次提交中。</p>\n<p>git add file1.txt file2.txt</p>\n<p>4，git commit</p>\n<p>创建一个新的提交。</p>\n<p>这将记录暂存区的修改以及自上次提交以来所做的任何其他修改，并附带一条描述这些修改的提交信息。</p>\n<p>git commit -m “添加新功能”</p>\n<p>git commit ‘’ <code>--noverify</code> 取消提交时格式化代码</p>\n<p>5，git push</p>\n<p>将提交推送到远程仓库。</p>\n<p>这将把本地的提交发送到指定的远程仓库，更新远程分支以包含新的提交。</p>\n<p>git push origin main</p>\n<p>6，git pull</p>\n<p>从远程仓库获取并合并修改。</p>\n<p>这会从指定的远程仓库中获取最新的提交，并将其合并到当前分支中。</p>\n<p>git pull origin main</p>\n<p>8，git branch</p>\n<p>列出、创建或删除分支。</p>\n<p>这个命令可以用来列出仓库中可用的分支，创建新的分支或删除现有的分支。</p>\n<p>git branch new-branch</p>\n<p>9，git checkout</p>\n<p>切换到不同的分支。</p>\n<p>这个命令允许你切换到仓库中的不同分支，并将其作为当前工作分支。</p>\n<p>git checkout main</p>\n<p>10，git merge</p>\n<p>将一个分支合并到另一个分支。</p>\n<p>这个命令将一个分支的修改合并到另一个分支中，创建一个反映合并变化的新提交。</p>\n<p>git merge new-branch</p>\n<p>11，git status</p>\n<p>显示仓库的状态。</p>\n<p>这个命令会显示当前分支、任何暂存或未暂存的修改以及任何未跟踪的文件。</p>\n<p>git status</p>\n<p>12，git rebase</p>\n<p>将一个分支的修改合并到另一个分支。</p>\n<p>假设你在”XYZ”分支上进行了一些修改，你希望将这些修改合并到”main”分支中。你可以使用git rebase命令将你的修改重新应用到main分支之上。</p>\n<p>13，git stash</p>\n<p>临时保存还未准备提交的修改。</p>\n<p>如果你的修改还没有准备好提交，但你想要切换到另一个分支继续工作，你可以临时保存你的修改以便以后使用，并在不丢失进度的情况下切换分支。</p>\n<p>（1）git stash save “save message”  : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。</p>\n<p>（2）git stash list  ：查看stash了哪些存储</p>\n<p>（3）git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}</p>\n<p>（4）git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show  stash@{$num}  -p ，比如第二个：git stash show  stash@{1}  -p</p>\n<p>（5）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1} </p>\n<p>（6）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}</p>\n<p>（7）git stash drop stash@{$num} ：丢弃stash@{$num}存储，从列表中删除这个存储</p>\n<p>（8）git stash clear ：删除所有缓存的stash</p>\n<p>14，git revert</p>\n<p>假设你在之前的提交中犯了一个错误，需要撤销它。你可以使用git revert创建一个新的提交，该提交会撤销之前提交引入的修改。</p>\n<p>git revert <commit1>..<commit2></p>\n<p>15，删除分支</p>\n<p>删除本地分支</p>\n<p>git branch -D branch</p>\n<p>git push <code>--delete</code> origin branch</p>\n<p>16, git reset</p>\n<p>回退提交错误的代码</p>\n<p>git reset <code>--hard</code> log</p>\n<p>git push -f origin branch</p>\n","feature":true,"text":"目前常用的git命令整理 1，git init 初始化一个新的Git仓库。 这将在当前目录中创建一个名为”.git”的子目录，Git会将所有仓库的元数据存储在其...","permalink":"/post/git","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"git","slug":"git","count":1,"path":"api/categories/git.json"}],"tags":[{"name":"git","slug":"git","count":1,"path":"api/tags/git.json"}],"toc":"","author":{"name":"M","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"这是我的博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"逐帧动画实现无限轮播","uid":"92e648db1789cade1fa84cef6b1bbfe8","slug":"animation-steps","date":"2024-08-11T07:44:20.576Z","updated":"2024-08-11T08:23:24.669Z","comments":true,"path":"api/articles/animation-steps.json","keywords":null,"cover":"/images/cover1.jpg","text":"最近有一个无限滚动轮播的需求，最开始用js+延时器写了一版，但因为是用在首页性能消耗很大，所以想试试能不能用css搞定，嘿，还真发现了一种方法，虽然最后没有使用...","permalink":"/post/animation-steps","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"css","slug":"css","count":2,"path":"api/categories/css.json"},{"name":"animation","slug":"css/animation","count":2,"path":"api/categories/css/animation.json"}],"tags":[{"name":"animation","slug":"animation","count":1,"path":"api/tags/animation.json"}],"author":{"name":"M","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"这是我的博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}