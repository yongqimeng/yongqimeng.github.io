{"title":"屏幕适配方案","uid":"758086e3bca7c26b0f11ceb6e2c6e587","slug":"屏幕适配方案","date":"2024-05-18T02:26:36.000Z","updated":"2024-10-09T13:09:15.618Z","comments":true,"path":"api/articles/屏幕适配方案.json","keywords":null,"cover":"/images/cover1.jpg","content":"<h3 id=\"1-使用-media搭配-rem-单位\"><a href=\"#1-使用-media搭配-rem-单位\" class=\"headerlink\" title=\"1.使用 @media搭配 rem 单位\"></a>1.使用 @media搭配 rem 单位</h3><p><code>rem</code>是相对于根<code>html</code>元素的字体大小的单位</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>; // <span class=\"number\">1rem</span> = <span class=\"number\">16px</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>借助<code>@media</code>可以为各种不同大小屏幕的根html元素设置不同的的字体大小</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> <span class=\"keyword\">only</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">400px</span>) &#123;</span><br><span class=\"line\">\t<span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@media</span> <span class=\"keyword\">only</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">400px</span>) <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">700px</span>) &#123;</span><br><span class=\"line\">\t<span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@media</span> <span class=\"keyword\">only</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">700px</span>) &#123;</span><br><span class=\"line\">\t<span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">font-size</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用插件<code>px to rem &amp; rpx &amp; vw (cssrem)</code>，插件设置<code>Root Font Size(默认16)</code>之后，可以自动将<code>px</code>计算成<code>rem</code>，<code>alt+z</code>一键转换</p>\n<p><strong>缺点 需要写多个<code>@media</code>适配尺寸   根标签<code>font-size</code>大小不好把握!!!</strong></p>\n<h3 id=\"2-flexble适配方案\"><a href=\"#2-flexble适配方案\" class=\"headerlink\" title=\"2.flexble适配方案\"></a>2.flexble适配方案</h3><p><a href=\"https://github.com/amfe/lib-flexible\">GitHub - amfe-flexible: 可伸缩布局方案</a></p>\n<p>使用js动态设置rem基准值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 核心代码：将屏幕分成多少等分的rem，这里可以根据设计稿自己调整</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setRemUnit</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rem = docEl.<span class=\"property\">clientWidth</span> / <span class=\"number\">10</span></span><br><span class=\"line\">    docEl.<span class=\"property\">style</span>.<span class=\"property\">fontSize</span> = rem + <span class=\"string\">&#x27;px&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在脚手架中可以配合插件<code>postcss-pxtorem</code>，打包后将<code>px</code>自动转换成<code>rem</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .postcssrc.js</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * PostCSS 配置文件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置要使用的 PostCSS 插件</span></span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 配置使用 autoprefixer 插件</span></span><br><span class=\"line\">      <span class=\"comment\">// 作用：生成浏览器 CSS 样式规则前缀</span></span><br><span class=\"line\">      <span class=\"comment\">// VueCLI 内部已经配置了 autoprefixer 插件</span></span><br><span class=\"line\">      <span class=\"comment\">// 所以又配置了一次，所以产生冲突了</span></span><br><span class=\"line\">      <span class=\"comment\">// &#x27;autoprefixer&#x27;: &#123; // autoprefixer 插件的配置</span></span><br><span class=\"line\">      <span class=\"comment\">//   // 配置要兼容到的环境信息</span></span><br><span class=\"line\">      <span class=\"comment\">//   browsers: [&#x27;Android &gt;= 4.0&#x27;, &#x27;iOS &gt;= 8&#x27;]</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"comment\">// 配置使用 postcss-pxtorem 插件</span></span><br><span class=\"line\">      <span class=\"comment\">// 作用：把 px 转为 rem</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;postcss-pxtorem&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"title function_\">rootValue</span> (&#123; file &#125;) &#123; </span><br><span class=\"line\">          <span class=\"keyword\">return</span> file.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;vant&#x27;</span>) !== -<span class=\"number\">1</span> ? <span class=\"number\">37.5</span> : <span class=\"number\">75</span> <span class=\"comment\">// 根据条件设置</span></span><br><span class=\"line\">        &#125;, <span class=\"comment\">// 表示根元素字体大小，它会根据根元素大小进行单位转换</span></span><br><span class=\"line\">        <span class=\"attr\">propList</span>: [<span class=\"string\">&#x27;*&#x27;</span>] <span class=\"comment\">// 用来设定可以从 px 转为 rem 的属性</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于<code>viewport</code>单位得到众多浏览器的兼容，<code>lib-flexible</code>这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用viewport来替代此方案。</p>\n<h3 id=\"3-viewport-适配方案\"><a href=\"#3-viewport-适配方案\" class=\"headerlink\" title=\"3.viewport 适配方案\"></a>3.viewport 适配方案</h3><p>设置<code>viewport meta</code> 标记来控制视口大小等于设备宽度，并且不允许手动缩放。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0, maxmun-scale=1.0, user-scalable=0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>-<br>    - vw：视口的最大宽度，1vw&#x3D;视口宽度的百分之一；</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #0A0A0A\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #abb2bf\">- vh：视口得最大高度，1vh=视口高度的百分之一；</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\"></span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">- vmin：视口高度 vw 和宽度 vh 两者之间的最小值。</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\"></span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">- vmax：视口高度 vw 和宽度 vh 两者之间的最大值。</span></span></code></pre></div><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 假设屏幕宽度为<span class=\"number\">750</span></span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100vw</span>; // <span class=\"number\">750px</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在脚手架中可以配合插件postcss-px-to-viewport，打包后将px自动转换成vw</p>\n<h3 id=\"4-scale缩放适配方案\"><a href=\"#4-scale缩放适配方案\" class=\"headerlink\" title=\"4.scale缩放适配方案\"></a>4.scale缩放适配方案</h3><p>多用于大屏数据可视化项目</p>\n<p>取屏幕宽高和设计稿宽高相比中最小的比例对外层盒子进行缩放并居中</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#scaleContainer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设计稿的宽度</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> desginWidth = <span class=\"number\">1920</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> desginHeight = <span class=\"number\">1080</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;scaleContainer&#x27;</span>).<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">`<span class=\"subst\">$&#123;desginWidth&#125;</span>px`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;scaleContainer&#x27;</span>).<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"string\">`<span class=\"subst\">$&#123;desginHeight&#125;</span>px`</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setScale</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> trueWidth = <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> trueHeight = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> wScale = trueWidth / desginWidth;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hScale = trueHeight / desginHeight;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> scale = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(wScale, hScale);</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;scaleContainer&#x27;</span>).<span class=\"property\">style</span>.<span class=\"property\">transform</span> = <span class=\"string\">`scale(<span class=\"subst\">$&#123;scale&#125;</span>) translate(-50%, -50%)`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, setScale);</span><br><span class=\"line\"><span class=\"title function_\">setScale</span>();</span><br></pre></td></tr></table></figure>\n\n<p>vue项目可以使用<code>v-scale-screen</code>插件</p>\n<p>缺点：当屏幕尺寸比例差距过大会有空白，以及模糊的效果。</p>\n<p>总结：</p>\n<p>移动端推荐使用viewport适配方案</p>\n<p>pc端或者响应式推荐@media搭配各种单位</p>\n<p>大屏可视化推荐使用scale缩放</p>\n","text":"1.使用 @media搭配 rem 单位rem是相对于根html元素的字体大小的单位 html { font-size: 16px;}span { font-s...","permalink":"/post/屏幕适配方案","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"html&css","slug":"html-css","count":12,"path":"api/categories/html-css.json"}],"tags":[{"name":"html&css","slug":"html-css","count":3,"path":"api/tags/html-css.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8-media%E6%90%AD%E9%85%8D-rem-%E5%8D%95%E4%BD%8D\"><span class=\"toc-text\">1.使用 @media搭配 rem 单位</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-flexble%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">2.flexble适配方案</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-viewport-%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">3.viewport 适配方案</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-scale%E7%BC%A9%E6%94%BE%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">4.scale缩放适配方案</span></a></li></ol>","author":{"name":"M","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"这是我的博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"多行文本展开收起的实现方式","uid":"53e70211b9fa8a0658b9a8cefd096926","slug":"full-text","date":"2024-05-25T09:10:39.000Z","updated":"2024-10-09T13:24:14.021Z","comments":true,"path":"api/articles/full-text.json","keywords":null,"cover":"/images/cover1.jpg","text":"多行文本超过指定行数，进行文本截断并显示省略号，并通过展开和收起来控制是否显示全部内容，调研很多种方式，目前这个是最合适的且最终的实现方案。 具体代码 <tem...","permalink":"/post/full-text","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"html&css","slug":"html-css","count":12,"path":"api/categories/html-css.json"}],"tags":[{"name":"html&css","slug":"html-css","count":3,"path":"api/tags/html-css.json"}],"author":{"name":"M","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"这是我的博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"EyeDropper API","uid":"318aeaee046984c3662b395e9f7232a5","slug":"EyeDropper","date":"2024-03-02T07:01:12.000Z","updated":"2024-10-16T14:59:32.317Z","comments":true,"path":"api/articles/EyeDropper.json","keywords":null,"cover":"/images/cover1.jpg","text":"创意应用通常允许用户从应用程序中的绘图或形状中取样颜色以便重用。Web 应用程序可以利用 EyeDropper API，通过浏览器提供类似的拾色器模式。 使用该...","permalink":"/post/EyeDropper","photos":[],"count_time":{"symbolsCount":987,"symbolsTime":"1 mins."},"categories":[{"name":"javascript","slug":"javascript","count":5,"path":"api/categories/javascript.json"}],"tags":[{"name":"Web API","slug":"Web-API","count":4,"path":"api/tags/Web-API.json"}],"author":{"name":"M","slug":"blog-author","avatar":"/images/avatar.jpg","link":"/","description":"这是我的博客","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}